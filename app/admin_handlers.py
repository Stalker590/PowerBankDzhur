from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message
import app.keyboards as kb
import app.database as db
from aiogram import Router
from app.main_handlers import format_power_bank_list
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import config

admin_router = Router()

@admin_router.message(CommandStart())
async def admin_start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤—ñ—Ç! –Ø –ë–æ—Ç –ø–æ –ø–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É!\n\n"
        f"–ó–Ω–∏–∑—É —î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–Ω–æ–ø–∫–∏,—â–æ–± –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–∏–º\"!\n\n"
        f"–û—Å–Ω–æ–≤–Ω–∏–π –±–æ—Ç –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É: {config.NAME_MAIN_BOT}"
        ,reply_markup = kb.admin_panel)

class AddProduct(StatesGroup):
    name = State()
    price = State()
    capacity = State()
    description = State()
    number = State()

@admin_router.message(F.text == "‚ûï–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def add_product(message: Message, state: FSMContext):
    print("add_product called")
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    await state.set_state(AddProduct.name)

@admin_router.message(AddProduct.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É:")
    await state.set_state(AddProduct.price)

@admin_router.message(AddProduct.price)
async def process_price(message: Message, state: FSMContext):
    await state.update_data(price=int(message.text))
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —î–º–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É (mAh):")
    await state.set_state(AddProduct.capacity)

@admin_router.message(AddProduct.capacity)
async def process_capacity(message: Message, state: FSMContext):
    await state.update_data(capacity=int(message.text))
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")
    await state.set_state(AddProduct.description)

@admin_router.message(AddProduct.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É:")
    await state.set_state(AddProduct.number)

@admin_router.message(AddProduct.number)
async def process_number(message: Message, state: FSMContext):
    await state.update_data(number=int(message.text))
    data = await state.get_data()
    if db.add_power_bank(data['name'], data['price'], data['capacity'], data['description'], data['number']):
        await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    else:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –¢–æ–≤–∞—Ä –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤–∂–µ —ñ—Å–Ω—É—î.")
    await state.clear()

@admin_router.message(F.text == "‚úÖ–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ç–æ–≤–∞—Ä–∏")
async def show_products(message: Message):
    print("show_products called")
    await message.answer("–û—Å—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:")
    power_bank_list_text = await format_power_bank_list()
    await message.answer(power_bank_list_text)

class DeleteProduct(StatesGroup):
    waiting_for_number = State()

@admin_router.message(F.text == "üóëÔ∏è–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä")
async def ask_product_number(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:")
    await state.set_state(DeleteProduct.waiting_for_number)

@admin_router.message(DeleteProduct.waiting_for_number)
async def delete_product(message: Message, state: FSMContext):
    try:
        number = int(message.text)
        if db.delete_power_bank(number):
            await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ.")
    await state.clear()




